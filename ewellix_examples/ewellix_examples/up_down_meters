#!/usr/bin/env python3

import rclpy
import rclpy.logging
from rclpy.node import Node
from rclpy.qos import qos_profile_system_default

from std_msgs.msg import Float64MultiArray
from sensor_msgs.msg import JointState


class EwellixUpDown(Node):

    def __init__(self):
        super().__init__('ewellix_up_down')

        self.declare_parameter('lift_number', 0)

        self.num = self.get_parameter('lift_number')

        self.max_meters = 0.27
        self.min_meters = 0.2
        self.error_count = 0
        self.error_ticks = []

        self.command_pub = self.create_publisher(
            Float64MultiArray,
            f'lift_{self.num.get_parameter_value().integer_value}_position_controller/commands',
            qos_profile_system_default
        )

        self.joint_state_sub = self.create_subscription(
            JointState,
            'joint_states',
            self.state_callback,
            qos_profile_system_default
        )

    def state_callback(self, msg: JointState):
        if f'lift_{self.num.get_parameter_value().integer_value}_lower_joint' not in msg.name:
            return

        index = msg.name.index(f'lift_{self.num.get_parameter_value().integer_value}_lower_joint')
        current_meters = msg.position[index]

        command_msg = Float64MultiArray()
        if current_meters > self.max_meters - 0.005 and current_meters < self.max_meters + 0.005:
            command_msg.data = [self.min_meters]
            self.command_pub.publish(command_msg)
        elif current_meters > self.min_meters - 0.005 and current_meters < self.min_meters + 0.005:
            command_msg.data = [self.max_meters]
            self.command_pub.publish(command_msg)


def main():
    rclpy.init()

    node = EwellixUpDown()

    rclpy.spin(node)

    node.destroy_node()

    rclpy.shutdown()


if __name__ == '__main__':
    main()
